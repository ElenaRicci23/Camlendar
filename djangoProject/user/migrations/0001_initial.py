# Generated by Django 4.2.6 on 2023-10-25 09:09

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'Un utente con questa email esiste già.'}, max_length=254, unique=True, validators=[django.core.validators.RegexValidator(message="L'email deve seguire il formato: nome.cognome@studenti.unicam.it", regex='^[a-zA-Z]+\\.[a-zA-Z]+@studenti\\.unicam\\.it$')], verbose_name='indirizzo email')),
                ('nome', models.CharField(max_length=255)),
                ('cognome', models.CharField(max_length=255)),
                ('anno_accademico', models.CharField(choices=[('1', '1° ANNO'), ('2', '2° ANNO'), ('3', '3° ANNO'), ('F', 'FUORICORSO')], max_length=1)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Maschio'), ('F', 'Femmina'), ('U', 'Unicorno')], max_length=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
